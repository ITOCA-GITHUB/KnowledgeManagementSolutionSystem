@model List<Google_cloud_storage_solution.Services.StorageObject>

@{
    ViewData["Title"] = "Storage";
    int? activityId = ViewBag.ActivityId as int?;
}

<style>
    body {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        margin: 0;
    }

    .content {
        flex: 1;
        padding: 20px;
    }

    table {
        width: 1300px;
        border-collapse: collapse;
        background-color: white;
        font-size: 18px;

    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
    }

    th {
        background-color: #f2f2f2;
        text-align: left;
    }

    tr:hover {
        background-color: #f5f5f5;
    }

    .breadcrumb {
        margin-bottom: 15px;
    }

        .breadcrumb a {
            text-decoration: none;
            color: #007bff;
        }

            .breadcrumb a:hover {
                text-decoration: underline;
            }

    .footer {
     margin-top: 300px;
    }
    .icon {
        width: 16px; /* Set the desired width */
        height: 16px; /* Set the desired height */
        margin-right: 8px; /* Optional: add some space between the icon and the text */
        color: #f0ad4e;
    }
    .icon img {
            background-color: #f0ad4e;
            color: #f0ad4e;
    }
</style>

@{
    var prefix = ViewBag.Prefix as string ?? "";
    var prefixPath = prefix.Split('/').Where(p => !string.IsNullOrEmpty(p)).ToList();
    var signedUrls = ViewBag.SignedUrls as Dictionary<string, string>;
}

<div class="content">
    <div class="breadcrumb">
        @if (prefixPath.Any())
        {
            for (int i = 0; i < prefixPath.Count; i++)
            {
                var path = string.Join("/", prefixPath.Take(i + 1));
                <a href="@Url.Action("Index", new { prefix = path })">@prefixPath[i]</a>
                @if (i < prefixPath.Count - 1)
                {
                    <span> / </span>
                }
            }
        }
    </div>

    <div>
        @if (prefixPath.Any())
        {
            <a href="@Url.Action("Index", new { prefix = string.Join("/", prefixPath.Take(prefixPath.Count - 1)) })">Up</a>
        }

        <form method="post" action="@Url.Action("CreateFolder")">
            <input type="hidden" name="parentFolderPath" value="@prefix" />
            <label for="newFolderName">New Folder Name:</label>
            <input type="text" id="newFolderName" name="newFolderName" required />
            <button type="submit">Create Folder</button>
        </form>

        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Last Modified</th>
                    <th>Size</th>
                    <th>Download Link</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @if (item.IsFolder)
                            {
                                <a href="@Url.Action("Index", new { prefix = item.Name })">
                                    <img src="~/images/Folder.png" class="icon" /> @item.Name.TrimEnd('/')
                                </a>
                            }
                            else
                            {
                                <img src="~/images/file.png" class="icon" /> @item.Name
                            }
                        </td>
                        <td>@item.LastModified?.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        <td>@item.Size?.ToString("N0")</td>
                        <td>
                            @if (!item.IsFolder && signedUrls != null && signedUrls.TryGetValue(item.Name, out var url))
                            {
                                <a href="@url" target="_blank">Download</a>
                            }
                            else
                            {

                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    window.addEventListener('beforeunload', function (event) {
        const exitTime = new Date().toISOString(); // Get the current time in ISO format
        navigator.sendBeacon('/MenuItem/RecordExitTime', JSON.stringify({
            activityId: @(activityId.HasValue ? activityId.Value.ToString() : "null"),
            exitTime: exitTime
        }));
    });
</script>
